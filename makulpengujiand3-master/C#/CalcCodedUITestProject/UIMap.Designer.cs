// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CalcCodedUITestProject
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// substraction
        /// </summary>
        public void substraction()
        {
            #region Variable Declarations
            WpfButton uIItem8Button = this.UIMyCalculatorv1Window.UIItem8Button;
            WpfButton uIItemButton = this.UIMyCalculatorv1Window.UIItemButton;
            WpfButton uIItem3Button = this.UIMyCalculatorv1Window.UIItem3Button;
            WpfButton uIItemButton1 = this.UIMyCalculatorv1Window.UIItemButton1;
            #endregion

            // Click '8' button
            Mouse.Click(uIItem8Button, new Point(15, 7));

            // Click '-' button
            Mouse.Click(uIItemButton, new Point(16, 21));

            // Click '3' button
            Mouse.Click(uIItem3Button, new Point(23, 7));

            // Click '=' button
            Mouse.Click(uIItemButton1, new Point(65, 11));
        }
        
        /// <summary>
        /// addition
        /// </summary>
        public void addition()
        {
            #region Variable Declarations
            WpfButton uIItem5Button = this.UIMyCalculatorv1Window.UIItem5Button;
            WpfButton uIItemButton2 = this.UIMyCalculatorv1Window.UIItemButton2;
            WpfButton uIItem4Button = this.UIMyCalculatorv1Window.UIItem4Button;
            WpfButton uIItemButton1 = this.UIMyCalculatorv1Window.UIItemButton1;
            #endregion

            // Click '5' button
            Mouse.Click(uIItem5Button, new Point(34, 16));

            // Click '+' button
            Mouse.Click(uIItemButton2, new Point(19, 10));

            // Click '4' button
            Mouse.Click(uIItem4Button, new Point(6, 17));

            // Click '=' button
            Mouse.Click(uIItemButton1, new Point(43, 11));
        }
        
        /// <summary>
        /// multiplication - Use 'multiplicationParams' to pass parameters into this method.
        /// </summary>
        public void multiplication()
        {
            #region Variable Declarations
            WinPane uIItemPane = this.UICharmBarWindow.UIItemWindow.UIItemPane;
            WinClient uIDesktopClient = this.UIItemWindow.UIItemWindow1.UIDesktopClient;
            WpfButton uIItem4Button = this.UIMyCalculatorv1Window.UIItem4Button;
            WpfButton uIItemButton3 = this.UIMyCalculatorv1Window.UIItemButton3;
            WpfButton uIItem6Button = this.UIMyCalculatorv1Window.UIItem6Button;
            WpfButton uIItemButton1 = this.UIMyCalculatorv1Window.UIItemButton1;
            #endregion

            // Press keyboard shortcut keys 'Windows + c'
            Keyboard.SendKeys(this.multiplicationParams.SendKeys, ModifierKeys.Windows);

            // Press keyboard shortcut keys 'Windows + c'
            Keyboard.SendKeys(this.multiplicationParams.SendKeys1, ModifierKeys.Windows);

            // Press keyboard shortcut keys 'Windows + c'
            Keyboard.SendKeys(this.multiplicationParams.SendKeys2, ModifierKeys.Windows);

            // Type '{Down}' in pane
            Keyboard.SendKeys(uIItemPane, this.multiplicationParams.UIItemPaneSendKeys, ModifierKeys.None);

            // Press keyboard shortcut keys 'Windows + c'
            Keyboard.SendKeys(this.multiplicationParams.SendKeys3, ModifierKeys.Windows);

            // Press keyboard shortcut keys 'Windows + c'
            Keyboard.SendKeys(this.multiplicationParams.SendKeys4, ModifierKeys.Windows);

            // Click 'Desktop' client
            Mouse.Click(uIDesktopClient, new Point(617, 408));

            // Click '4' button
            Mouse.Click(uIItem4Button, new Point(28, 15));

            // Click '*' button
            Mouse.Click(uIItemButton3, new Point(13, 19));

            // Click '6' button
            Mouse.Click(uIItem6Button, new Point(21, 24));

            // Click '=' button
            Mouse.Click(uIItemButton1, new Point(71, 8));
        }
        
        /// <summary>
        /// division
        /// </summary>
        public void division()
        {
            #region Variable Declarations
            WpfButton uIItem6Button = this.UIMyCalculatorv1Window.UIItem6Button;
            WpfButton uIItemButton4 = this.UIMyCalculatorv1Window.UIItemButton4;
            WpfButton uIItem2Button = this.UIMyCalculatorv1Window.UIItem2Button;
            WpfButton uIItemButton1 = this.UIMyCalculatorv1Window.UIItemButton1;
            #endregion

            // Click '6' button
            Mouse.Click(uIItem6Button, new Point(18, 16));

            // Click '/' button
            Mouse.Click(uIItemButton4, new Point(15, 15));

            // Click '2' button
            Mouse.Click(uIItem2Button, new Point(31, 8));

            // Click '=' button
            Mouse.Click(uIItemButton1, new Point(47, 7));
        }
        
        /// <summary>
        /// reset
        /// </summary>
        public void reset()
        {
            #region Variable Declarations
            WpfButton uIDelButton = this.UIMyCalculatorv1Window.UIDelButton;
            #endregion

            // Click 'Del' button
            Mouse.Click(uIDelButton, new Point(29, 14));
        }
        
        /// <summary>
        /// backspace
        /// </summary>
        public void backspace()
        {
            #region Variable Declarations
            WpfButton uIRButton = this.UIMyCalculatorv1Window.UIRButton;
            WpfButton uIItem8Button = this.UIMyCalculatorv1Window.UIItem8Button;
            WpfButton uIItemButton1 = this.UIMyCalculatorv1Window.UIItemButton1;
            #endregion

            // Click 'R' button
            Mouse.Click(uIRButton, new Point(24, 5));

            // Click 'R' button
            Mouse.Click(uIRButton, new Point(24, 5));

            // Click 'R' button
            Mouse.Click(uIRButton, new Point(24, 5));

            // Click 'R' button
            Mouse.Click(uIRButton, new Point(24, 5));

            // Click 'R' button
            Mouse.Click(uIRButton, new Point(24, 5));

            // Click '8' button
            Mouse.Click(uIItem8Button, new Point(25, 9));

            // Click '=' button
            Mouse.Click(uIItemButton1, new Point(50, 11));
        }
        
        /// <summary>
        /// close
        /// </summary>
        public void close()
        {
            #region Variable Declarations
            WpfButton uIOffButton = this.UIMyCalculatorv1Window.UIOffButton;
            #endregion

            // Click 'Off' button
            Mouse.Click(uIOffButton, new Point(67, 26));
        }
        
        #region Properties
        public virtual multiplicationParams multiplicationParams
        {
            get
            {
                if ((this.mmultiplicationParams == null))
                {
                    this.mmultiplicationParams = new multiplicationParams();
                }
                return this.mmultiplicationParams;
            }
        }
        
        public UIMyCalculatorv1Window UIMyCalculatorv1Window
        {
            get
            {
                if ((this.mUIMyCalculatorv1Window == null))
                {
                    this.mUIMyCalculatorv1Window = new UIMyCalculatorv1Window();
                }
                return this.mUIMyCalculatorv1Window;
            }
        }
        
        public UICharmBarWindow UICharmBarWindow
        {
            get
            {
                if ((this.mUICharmBarWindow == null))
                {
                    this.mUICharmBarWindow = new UICharmBarWindow();
                }
                return this.mUICharmBarWindow;
            }
        }
        
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2();
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private multiplicationParams mmultiplicationParams;
        
        private UIMyCalculatorv1Window mUIMyCalculatorv1Window;
        
        private UICharmBarWindow mUICharmBarWindow;
        
        private UIItemWindow2 mUIItemWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'multiplication'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class multiplicationParams
    {
        
        #region Fields
        /// <summary>
        /// Press keyboard shortcut keys 'Windows + c'
        /// </summary>
        public string SendKeys = "c";
        
        /// <summary>
        /// Press keyboard shortcut keys 'Windows + c'
        /// </summary>
        public string SendKeys1 = "c";
        
        /// <summary>
        /// Press keyboard shortcut keys 'Windows + c'
        /// </summary>
        public string SendKeys2 = "c";
        
        /// <summary>
        /// Type '{Down}' in pane
        /// </summary>
        public string UIItemPaneSendKeys = "{Down}";
        
        /// <summary>
        /// Press keyboard shortcut keys 'Windows + c'
        /// </summary>
        public string SendKeys3 = "c";
        
        /// <summary>
        /// Press keyboard shortcut keys 'Windows + c'
        /// </summary>
        public string SendKeys4 = "c";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIMyCalculatorv1Window : WpfWindow
    {
        
        public UIMyCalculatorv1Window()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "MyCalculator v1";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MyCalculator v1");
            #endregion
        }
        
        #region Properties
        public WpfButton UIItem8Button
        {
            get
            {
                if ((this.mUIItem8Button == null))
                {
                    this.mUIItem8Button = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItem8Button.SearchProperties[WpfButton.PropertyNames.Name] = "8";
                    this.mUIItem8Button.WindowTitles.Add("MyCalculator v1");
                    #endregion
                }
                return this.mUIItem8Button;
            }
        }
        
        public WpfButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WpfButton.PropertyNames.Name] = "-";
                    this.mUIItemButton.WindowTitles.Add("MyCalculator v1");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        
        public WpfButton UIItem3Button
        {
            get
            {
                if ((this.mUIItem3Button == null))
                {
                    this.mUIItem3Button = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItem3Button.SearchProperties[WpfButton.PropertyNames.Name] = "3";
                    this.mUIItem3Button.WindowTitles.Add("MyCalculator v1");
                    #endregion
                }
                return this.mUIItem3Button;
            }
        }
        
        public WpfButton UIItemButton1
        {
            get
            {
                if ((this.mUIItemButton1 == null))
                {
                    this.mUIItemButton1 = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton1.SearchProperties[WpfButton.PropertyNames.Name] = "=";
                    this.mUIItemButton1.WindowTitles.Add("MyCalculator v1");
                    #endregion
                }
                return this.mUIItemButton1;
            }
        }
        
        public WpfButton UIItem5Button
        {
            get
            {
                if ((this.mUIItem5Button == null))
                {
                    this.mUIItem5Button = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItem5Button.SearchProperties[WpfButton.PropertyNames.Name] = "5";
                    this.mUIItem5Button.WindowTitles.Add("MyCalculator v1");
                    #endregion
                }
                return this.mUIItem5Button;
            }
        }
        
        public WpfButton UIItemButton2
        {
            get
            {
                if ((this.mUIItemButton2 == null))
                {
                    this.mUIItemButton2 = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton2.SearchProperties[WpfButton.PropertyNames.Name] = "+";
                    this.mUIItemButton2.WindowTitles.Add("MyCalculator v1");
                    #endregion
                }
                return this.mUIItemButton2;
            }
        }
        
        public WpfButton UIItem4Button
        {
            get
            {
                if ((this.mUIItem4Button == null))
                {
                    this.mUIItem4Button = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItem4Button.SearchProperties[WpfButton.PropertyNames.Name] = "4";
                    this.mUIItem4Button.WindowTitles.Add("MyCalculator v1");
                    #endregion
                }
                return this.mUIItem4Button;
            }
        }
        
        public WpfButton UIItemButton3
        {
            get
            {
                if ((this.mUIItemButton3 == null))
                {
                    this.mUIItemButton3 = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton3.SearchProperties[WpfButton.PropertyNames.Name] = "*";
                    this.mUIItemButton3.WindowTitles.Add("MyCalculator v1");
                    #endregion
                }
                return this.mUIItemButton3;
            }
        }
        
        public WpfButton UIItem6Button
        {
            get
            {
                if ((this.mUIItem6Button == null))
                {
                    this.mUIItem6Button = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItem6Button.SearchProperties[WpfButton.PropertyNames.Name] = "6";
                    this.mUIItem6Button.WindowTitles.Add("MyCalculator v1");
                    #endregion
                }
                return this.mUIItem6Button;
            }
        }
        
        public WpfButton UIItemButton4
        {
            get
            {
                if ((this.mUIItemButton4 == null))
                {
                    this.mUIItemButton4 = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton4.SearchProperties[WpfButton.PropertyNames.Name] = "/";
                    this.mUIItemButton4.WindowTitles.Add("MyCalculator v1");
                    #endregion
                }
                return this.mUIItemButton4;
            }
        }
        
        public WpfButton UIItem2Button
        {
            get
            {
                if ((this.mUIItem2Button == null))
                {
                    this.mUIItem2Button = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItem2Button.SearchProperties[WpfButton.PropertyNames.Name] = "2";
                    this.mUIItem2Button.WindowTitles.Add("MyCalculator v1");
                    #endregion
                }
                return this.mUIItem2Button;
            }
        }
        
        public WpfButton UIDelButton
        {
            get
            {
                if ((this.mUIDelButton == null))
                {
                    this.mUIDelButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIDelButton.SearchProperties[WpfButton.PropertyNames.Name] = "Del";
                    this.mUIDelButton.WindowTitles.Add("MyCalculator v1");
                    #endregion
                }
                return this.mUIDelButton;
            }
        }
        
        public WpfButton UIRButton
        {
            get
            {
                if ((this.mUIRButton == null))
                {
                    this.mUIRButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIRButton.SearchProperties[WpfButton.PropertyNames.Name] = "R";
                    this.mUIRButton.WindowTitles.Add("MyCalculator v1");
                    #endregion
                }
                return this.mUIRButton;
            }
        }
        
        public WpfButton UIOffButton
        {
            get
            {
                if ((this.mUIOffButton == null))
                {
                    this.mUIOffButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIOffButton.SearchProperties[WpfButton.PropertyNames.Name] = "Off";
                    this.mUIOffButton.WindowTitles.Add("MyCalculator v1");
                    #endregion
                }
                return this.mUIOffButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIItem8Button;
        
        private WpfButton mUIItemButton;
        
        private WpfButton mUIItem3Button;
        
        private WpfButton mUIItemButton1;
        
        private WpfButton mUIItem5Button;
        
        private WpfButton mUIItemButton2;
        
        private WpfButton mUIItem4Button;
        
        private WpfButton mUIItemButton3;
        
        private WpfButton mUIItem6Button;
        
        private WpfButton mUIItemButton4;
        
        private WpfButton mUIItem2Button;
        
        private WpfButton mUIDelButton;
        
        private WpfButton mUIRButton;
        
        private WpfButton mUIOffButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UICharmBarWindow : WinWindow
    {
        
        public UICharmBarWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Charm Bar";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "NativeHWNDHost";
            this.WindowTitles.Add("Charm Bar");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Charm Bar");
            #endregion
        }
        
        #region Properties
        public WinPane UIItemPane
        {
            get
            {
                if ((this.mUIItemPane == null))
                {
                    this.mUIItemPane = new WinPane(this);
                    #region Search Criteria
                    this.mUIItemPane.WindowTitles.Add("Charm Bar");
                    #endregion
                }
                return this.mUIItemPane;
            }
        }
        #endregion
        
        #region Fields
        private WinPane mUIItemPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Shell_LightDismissOverlay";
            #endregion
        }
        
        #region Properties
        public WinClient UIDesktopClient
        {
            get
            {
                if ((this.mUIDesktopClient == null))
                {
                    this.mUIDesktopClient = new WinClient(this);
                }
                return this.mUIDesktopClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIDesktopClient;
        #endregion
    }
}
